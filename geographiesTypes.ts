/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations["health_check_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geographies/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List All Countries
     * @description List all countries with their metadata.
     *
     *     NOTE: This endpoint retrieves a list of all countries, including
     *     their ISO codes, names, and flag emojis. It can be used to populate
     *     dropdowns or selection menus in user interfaces.
     *
     *     :return list[CountryResponse]: A list of country objects containing
     *         alpha-2, alpha-3 codes, name, official name, numeric code, and flag emoji.
     */
    get: operations["list_all_countries_geographies__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geographies/countries/{code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Country
     * @description Get country information by ISO alpha-3 code.
     *
     *     NOTE: This endpoint retrieves metadata about a country by its
     *     alpha-3 code (e.g., 'USA'). It can be used to populate region-level
     *     UI components or to enrich geographic data.
     *
     *     :param str code: ISO alpha-3 country code (e.g., 'USA', 'GBR', 'CAN').
     *     :return CountryResponse: An object representing the country,
     *         including name, codes, and flag emoji.
     */
    get: operations["get_country_geographies_countries__code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geographies/subdivisions/{country_code}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Country Subdivisions
     * @description Get subdivisions for a country by ISO alpha-3 code.
     *
     *     NOTE: This endpoint retrieves first-level administrative subdivisions
     *     (such as states, provinces, or regions) for a given country using
     *     its ISO alpha-3 code (e.g., 'USA', 'AUS', 'CAN'). This can be used to
     *     support region-based filtering, selection menus, or geographic analysis.
     *
     *     :param str country_code: ISO alpha-3 country code (e.g., 'USA', 'AUS', 'CAN').
     *     :return list[SubdivisionResponse]: A list of subdivision objects representing
     *         the primary administrative divisions of the country.
     */
    get: operations["get_country_subdivisions_geographies_subdivisions__country_code__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geographies/populate-s3-bucket": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Populate S3 Bucket
     * @description Populate the S3 bucket with geographies data.
     *
     *     NOTE: This endpoint is intended for internal use to populate the S3 bucket
     *     with geography-related data.
     */
    get: operations["populate_s3_bucket_geographies_populate_s3_bucket_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/geographies/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations["health_check_geographies_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** CountryResponse */
    CountryResponse: {
      /** Alpha 2 */
      alpha_2: string;
      /** Alpha 3 */
      alpha_3: string;
      /** Name */
      name: string;
      /** Official Name */
      official_name?: string | null;
      /** Numeric */
      numeric: string;
      /** Flag */
      flag?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** SubdivisionResponse */
    SubdivisionResponse: {
      /** Code */
      code: string;
      /** Name */
      name: string;
      /** Type */
      type: string;
      /** Country Alpha 2 */
      country_alpha_2: string;
      /** Country Alpha 3 */
      country_alpha_3: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  health_check_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  list_all_countries_geographies__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CountryResponse"][];
        };
      };
    };
  };
  get_country_geographies_countries__code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ISO alpha-3 country code */
        code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CountryResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_country_subdivisions_geographies_subdivisions__country_code__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ISO alpha-3 country code */
        country_code: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubdivisionResponse"][];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  populate_s3_bucket_geographies_populate_s3_bucket_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  health_check_geographies_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
