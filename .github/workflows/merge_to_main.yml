name: Merge to main
on:
  push:
    branches:
      - main
      - push-to-ecrt

# trunk-ignore(checkov/CKV2_GHA_1)
permissions: write-all
jobs:
  lhci-desktop:
    name: Lighthouse Desktop
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        theme: [cpr, cclw, mcf, ccc]
    permissions:
      checks: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.12.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm install
      - run: cp .env.example .env
      - run: ROBOTS=true npm run build
      - name: install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x
      - id: upper-theme
        name: Theme to uppercase
        run: |
          theme=$(echo ${{ matrix.theme }} | tr '[:lower:]' '[:upper:]')
          echo "theme=$theme" >> $GITHUB_OUTPUT
      - name: run Lighthouse Desktop
        run: lhci autorun --config=lighthouserc.desktop.js --collect.settings.preset=desktop
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets[format('LHCI_{0}_DESKTOP_TOKEN', steps.upper-theme.outputs.theme)] }}
          ROBOTS: true

  lhci-mobile:
    name: Lighthouse Mobile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        theme: [cpr, cclw, mcf, ccc]
    permissions:
      checks: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.12.0
        uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm install
      - run: cp .env.example .env
      - run: ROBOTS=true npm run build
      - name: install Lighthouse CI
        run: npm install -g @lhci/cli@0.14.x
      - id: upper-theme
        name: Theme to uppercase
        run: |
          theme=$(echo ${{ matrix.theme }} | tr '[:lower:]' '[:upper:]')
          echo "theme=$theme" >> $GITHUB_OUTPUT
      - name: run Lighthouse Mobile
        run: lhci autorun --config=lighthouserc.mobile.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets[format('LHCI_{0}_MOBILE_TOKEN', steps.upper-theme.outputs.theme)] }}
          ROBOTS: true

  percy:
    runs-on: ubuntu-latest
    env:
      THEME: cpr
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm install
      - run: cp .env.example .env
      - run: npm run build
        env:
          NODE_ENV: production
      - run: npm run start &
      - run: |
          echo "Waiting for server to start..."
          npx wait-on http://localhost:3000
      - run: npx percy snapshot snapshots.js
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
      - if: always()
        run: kill $(lsof -t -i:3000) || true

  # test
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm install
      - uses: trunk-io/trunk-action@v1
        with:
          arguments: --ci

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm install
      - run: cp .env.example .env
      - run: npm run build
        env:
          NODE_ENV: production
      - name: Run tests and upload results to Trunk.io
        uses: trunk-io/analytics-uploader@v1
        with:
          junit-paths: test-results/**/vitest.xml
          run: npm run test
          token: ${{ secrets.TRUNK_TOKEN }}
          org-slug: ${{ secrets.TRUNK_ORG_SLUG }}
        env:
          THEME: cpr

  test-e2e:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        theme: [cpr, cclw, mcf]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - run: npm ci
      - run: cp .env.example .env
      - run: THEME=${{ matrix.theme }} npm run build
        env:
          NODE_ENV: production
      - run: npx playwright install --with-deps

      - name: Ensure test results directory exists
        run: mkdir -p test-results-${{ matrix.theme }}

      - name: Run tests and upload results to Trunk.io
        uses: trunk-io/analytics-uploader@v1
        with:
          junit-paths: test-results-${{ matrix.theme }}/playwright.xml
          run: npx playwright test tests/core/ tests/${{ matrix.theme }}/ --reporter=junit
          token: ${{ secrets.TRUNK_TOKEN }}
          org-slug: ${{ secrets.TRUNK_ORG_SLUG }}
        env:
          THEME: ${{ matrix.theme }}

  release:
    runs-on: ubuntu-latest
    needs: [code-quality, test, test-e2e]
    strategy:
      fail-fast: false
      matrix:
        theme: [cpr, cclw, mcf, ccc]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0

      # build
      - run: |
          export THEME=${{ matrix.theme }}
          make build

      # release
      # most of this is taken from
      # https://docs.github.com/en/actions/use-cases-and-examples/deploying/deploying-to-amazon-elastic-container-service#creating-the-workflow
      - name: Configure AWS credentials (staging)
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_STAGING }}:role/navigator-frontend-github-actions
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1
      - name: Login to Amazon ECR (staging)
        id: login-ecr-staging
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      - name: Build, tag, and push image to Amazon ECR (staging)
        id: build-image-staging
        env:
          ECR_REGISTRY: ${{ secrets.DOCKER_REGISTRY_STAGING }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: eu-west-1
          ECR_REPOSITORY: navigator-frontend-${{ matrix.theme }}
          THEME: ${{ matrix.theme }}
        run: |
          docker build --build-arg THEME=${THEME} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure aws credentials (production)
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_PROD }}:role/navigator-frontend-github-actions
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: eu-west-1
      - name: Login to Amazon ECR (production)
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR (production)
        id: build-image-prod
        env:
          ECR_REGISTRY: ${{ secrets.DOCKER_REGISTRY_PROD }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_REGION: eu-west-1
          ECR_REPOSITORY: navigator-frontend-${{ matrix.theme }}
          THEME: ${{ matrix.theme }}
        run: |
          docker build --build-arg THEME=${THEME} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  storybook:
    runs-on: ubuntu-latest
    env:
      THEME: cpr
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.12.0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - run: npm install
      - run: npm run build-storybook
      - name: Upload to S3
        run: |
          aws s3 sync --delete ./storybook-static s3://storybook.climatepolicyradar.org
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-west-1
